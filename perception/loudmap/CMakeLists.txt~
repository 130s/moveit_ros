CMAKE_MINIMUM_REQUIRED(VERSION 2.6)
PROJECT(loudmap)

ENABLE_TESTING()

# version (e.g. for packaging)
set(LOUDMAP_MAJOR_VERSION 0)
set(LOUDMAP_MINOR_VERSION 1)
set(LOUDMAP_PATCH_VERSION 0)
set(LOUDMAP_VERSION ${LOUDMAP_MAJOR_VERSION}.${LOUDMAP_MINOR_VERSION}.${LOUDMAP_PATCH_VERSION})

if(COMMAND cmake_policy)
  cmake_policy(SET CMP0003 NEW)
endif(COMMAND cmake_policy)

SET (CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/CMakeModules")

# COMPILER SETTINGS (default: Release) and flags
INCLUDE(CompilerSettings)


# Set output directories for libraries and executables
SET( BASE_DIR ${CMAKE_SOURCE_DIR} )
SET( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${BASE_DIR}/lib )
SET( CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${BASE_DIR}/lib )
SET( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${BASE_DIR}/bin )

set(INCLUDE_DIRS "${PROJECT_SOURCE_DIR}/include")
INCLUDE_DIRECTORIES(${INCLUDE_DIRS})

LINK_DIRECTORIES(${CMAKE_LIBRARY_OUTPUT_DIRECTORY})

# Installation

set(INSTALL_TARGETS_DEFAULT_ARGS
	RUNTIME DESTINATION bin
	LIBRARY DESTINATION lib
	ARCHIVE DESTINATION lib
)

find_package(octomap REQUIRED
  HINTS ${CMAKE_SOURCE_DIR}/lib/cmake/octomap
   ${CMAKE_SOURCE_DIR}/../octomap/lib/cmake/octomap
)
INCLUDE_DIRECTORIES(${OCTOMAP_INCLUDE_DIRS})
LINK_DIRECTORIES(${OCTOMAP_LIBRARY_DIRS})

ADD_SUBDIRECTORY(src)


file(GLOB loudmap_HDRS ${PROJECT_SOURCE_DIR}/include/loudmap/*.h ${PROJECT_SOURCE_DIR}/include/loudmap/*.hxx)
install(FILES ${loudmap_HDRS}	DESTINATION include/loudmap)

#TODO: this conflicts with the octomap uninstall
#it is not only a target name problem, also both will use the same manifest file
#in the same binary directory
#configure_file(
#    "${PROJECT_SOURCE_DIR}/CMakeModules/CMakeUninstall.cmake.in"
#    "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"
#    IMMEDIATE @ONLY)
#
#add_custom_target(uninstall
#    COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake)


# Export the package for use from the build-tree
# (this registers the build-tree with a global CMake-registry)
export(PACKAGE loudmap)
 
# Create a loudmapConfig.cmake file for the use from the build tree
set(LOUDMAP_INCLUDE_DIRS "${INCLUDE_DIRS}")
set(LOUDMAP_LIB_DIR "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}")
# not used right now (export depends?)
#set(LOUDMAP_CMAKE_DIR "${PROJECT_BINARY_DIR}")
configure_file(loudmapConfig.cmake.in
  "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/cmake/loudmap/loudmapConfig.cmake" @ONLY)
configure_file(loudmapConfig-version.cmake.in
  "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/cmake/loudmap/loudmapConfig-version.cmake" @ONLY)

# Install the export set for use with the install-tree
#install(EXPORT FooBarLibraryDepends DESTINATION
#  "${INSTALL_DATA_DIR}/FooBar/CMake"
#  COMPONENT dev)
 
# Create a loudmapConfig.cmake file for the use from the install tree
# and install it
set(LOUDMAP_INCLUDE_DIRS "${CMAKE_INSTALL_PREFIX}/include")
set(LOUDMAP_LIB_DIR "${CMAKE_INSTALL_PREFIX}/lib")
#set(LOUDMAP_CMAKE_DIR "${INSTALL_DATA_DIR}/FooBar/CMake")
configure_file(loudmapConfig.cmake.in
  "${PROJECT_BINARY_DIR}/InstallFiles/loudmapConfig.cmake" @ONLY)
configure_file(loudmapConfig-version.cmake.in
  "${PROJECT_BINARY_DIR}/InstallFiles/loudmapConfig-version.cmake" @ONLY)
install(FILES
  "${PROJECT_BINARY_DIR}/InstallFiles/loudmapConfig.cmake"
  "${PROJECT_BINARY_DIR}/InstallFiles/loudmapConfig-version.cmake" 
  DESTINATION lib/cmake/loudmap/)

# Write pkgconfig-file:
include(InstallPkgConfigFile)
install_pkg_config_file(loudmap
    CFLAGS
    LIBS -lloudmap
    REQUIRES
    VERSION ${LOUDMAP_MAJOR_VERSION}.${LOUDMAP_MINOR_VERSION}.${LOUDMAP_PATCH_VERSION})


# Documentation 
FIND_PACKAGE(Doxygen)
IF(DOXYGEN_FOUND)
  ADD_CUSTOM_TARGET(docs_loudmap ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_SOURCE_DIR}/loudmap.dox
    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
    COMMENT "Generating documentation (Doxygen)...")
ENDIF(DOXYGEN_FOUND)

# Needs to be last statement:
INCLUDE(CPackSettings)

# Finished:
MESSAGE ("\n")
MESSAGE (STATUS "Compile loudmap using: make")
MESSAGE (STATUS "Install loudmap using: make install")
MESSAGE (STATUS "    (be sure to set the correct CMAKE_INSTALL_PREFIX before)")
MESSAGE (STATUS "Compile API-documentation using: make docs_loudmap\n")



##CMAKE_MINIMUM_REQUIRED(VERSION 0.0.1)
##PROJECT( loudmap )

##ENABLE_TESTING()

##find_package(Boost octomap REQUIRED)

### version (e.g. for packaging)
##set(LOUDMAP_MAJOR_VERSION 0)
##set(LOUDMAP_MINOR_VERSION 0)
##set(LOUDMAP_PATCH_VERSION 1)
##set(LOUDMAP_VERSION ${LOUDMAP_MAJOR_VERSION}.${LOUDMAP_MINOR_VERSION}.${LOUDMAP_PATCH_VERSION})
##if(COMMAND cmake_policy)
##  cmake_policy(SET CMP0003 NEW)
##endif(COMMAND cmake_policy)

##SET (CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/CMakeModules")

### COMPILER SETTINGS (default: Release) and flags
##INCLUDE(CompilerSettings)

### Set output directories for libraries and executables
##SET( BASE_DIR ${CMAKE_SOURCE_DIR} )
##SET( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${BASE_DIR}/lib )
##SET( CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${BASE_DIR}/lib )
##SET( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${BASE_DIR}/bin )

##set(INCLUDE_DIRS "${PROJECT_SOURCE_DIR}/include")
##INCLUDE_DIRECTORIES(${INCLUDE_DIRS})

##LINK_DIRECTORIES(${CMAKE_LIBRARY_OUTPUT_DIRECTORY})

### Installation

##set(INSTALL_TARGETS_DEFAULT_ARGS
##	RUNTIME DESTINATION bin
##	LIBRARY DESTINATION lib
##	ARCHIVE DESTINATION lib
##)

##ADD_SUBDIRECTORY( src )

##file(GLOB loudmap_HDRS ${PROJECT_SOURCE_DIR}/include/loudmap/*.h ${PROJECT_SOURCE_DIR}/include/loudmap/*.hxx)
##install(FILES ${loudmap_HDRS}	DESTINATION include/loudmap)

### uninstall target
##configure_file(
##    "${PROJECT_SOURCE_DIR}/CMakeModules/CMakeUninstall.cmake.in"
##    "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"
##    IMMEDIATE @ONLY)

###add_custom_target(uninstall
###    COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake)


### Export the package for use from the build-tree
### (this registers the build-tree with a global CMake-registry)
##export(PACKAGE loudmap)
 
### Create a loudmap-config.cmake file for the use from the build tree
##set(LOUDMAP_INCLUDE_DIRS "${INCLUDE_DIRS}")
##set(LOUDMAP_LIB_DIR "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}")
### not used right now (export depends?)
###set(LOUDMAP_CMAKE_DIR "${PROJECT_BINARY_DIR}")
##configure_file(loudmap-config.cmake.in
##  "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/cmake/loudmap/loudmap-config.cmake" @ONLY)
##configure_file(loudmap-config-version.cmake.in
##  "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/cmake/loudmap/loudmap-config-version.cmake" @ONLY)

### Install the export set for use with the install-tree
###install(EXPORT FooBarLibraryDepends DESTINATION
###  "${INSTALL_DATA_DIR}/FooBar/CMake"
###  COMPONENT dev)
 
### Create a loudmap-config.cmake file for the use from the install tree
### and install it
##set(LOUDMAP_INCLUDE_DIRS "${CMAKE_INSTALL_PREFIX}/include")
##set(LOUDMAP_LIB_DIR "${CMAKE_INSTALL_PREFIX}/lib")
###set(LOUDMAP_CMAKE_DIR "${INSTALL_DATA_DIR}/FooBar/CMake")
##configure_file(loudmap-config.cmake.in
##  "${PROJECT_BINARY_DIR}/InstallFiles/loudmap-config.cmake" @ONLY)
##configure_file(loudmap-config-version.cmake.in
##  "${PROJECT_BINARY_DIR}/InstallFiles/loudmap-config-version.cmake" @ONLY)
##install(FILES
##  "${PROJECT_BINARY_DIR}/InstallFiles/loudmap-config.cmake"
##  "${PROJECT_BINARY_DIR}/InstallFiles/loudmap-config-version.cmake" 
##  DESTINATION share/loudmap/)

### Write pkgconfig-file:
##include(InstallPkgConfigFile)
##install_pkg_config_file(loudmap
##    CFLAGS
##    LIBS -lloudmap
##    REQUIRES
##    VERSION ${LOUDMAP_VERSION})

### Documentation 
###FIND_PACKAGE(Doxygen)
###IF(DOXYGEN_FOUND)
###  configure_file(${CMAKE_CURRENT_SOURCE_DIR}/loudmap.dox.in ${CMAKE_CURRENT_BINARY_DIR}/loudmap.dox @ONLY)
###  ADD_CUSTOM_TARGET(docs ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/loudmap.dox
###    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
###    COMMENT "Generating documentation (Doxygen) at location ${PROJECT_SOURCE_DIR}/doc/html/")
###ENDIF(DOXYGEN_FOUND)

### make package release from source (must be done on the SVN source tree)
##IF (NOT WIN32)
##	SET(LOUDMAP_PKG_NAME "${PROJECT_NAME}-${LOUDMAP_VERSION}.tar.gz")
##	SET(DIST_DIR "${CMAKE_BINARY_DIR}/dist-${PROJECT_NAME}")
##	ADD_CUSTOM_TARGET("dist-${PROJECT_NAME}" 
##		rm -rf "${DIST_DIR}" "${CMAKE_BINARY_DIR}/${LOUDMAP_PKG_NAME}"
##		COMMAND mkdir "${DIST_DIR}"
##		COMMAND svn export --force -q "${PROJECT_SOURCE_DIR}" "${DIST_DIR}/${PROJECT_NAME}" 
##		COMMAND tar -czf "${CMAKE_BINARY_DIR}/${LOUDMAP_PKG_NAME}" -C "${DIST_DIR}" --exclude=".hidden" "${PROJECT_NAME}"
##			WORKING_DIRECTORY "${PROJECT_SOURCE_DIR}"
##		# cleanup so that there is no copy in the source dir
##		COMMAND rm -rf "${DIST_DIR}"
##	)
##ENDIF()

### Needs to be last statement:
##INCLUDE(CPackSettings)

### Finished:
##MESSAGE ("\n")
##MESSAGE (STATUS "Compile loudmap using: make")
##MESSAGE (STATUS "Install loudmap using: make install")
##MESSAGE (STATUS "    (be sure to set the correct CMAKE_INSTALL_PREFIX before)")
##MESSAGE (STATUS "Compile API-documentation using: make docs\n")

